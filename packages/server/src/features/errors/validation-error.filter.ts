import {
  ArgumentsHost,
  BadRequestException,
  Catch,
  ExceptionFilter,
} from '@nestjs/common';

import CustomValidationError from 'src/errors/CustomValidationError';
import { Response } from 'express';
import { ValidationError } from 'class-validator';

/**
 * Generated by AI
 */
@Catch(BadRequestException, CustomValidationError)
export class ValidationExceptionFilter implements ExceptionFilter {
  catch(exception: BadRequestException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const status = exception.getStatus();

    const validationErrors = exception.getResponse() as object;

    if (Object.keys(validationErrors).includes('payloads')) {
      response.status(status).json((validationErrors as any).payloads);
    } else {
      response.status(status).json(validationErrors);
    }
  }
}
